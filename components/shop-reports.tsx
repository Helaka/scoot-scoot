"use client"

import { useState } from "react"
import { ShopLayout } from "./shop-layout"
import {
  FileText,
  Download,
  Calendar,
  BarChart2,
  PieChart,
  LineChart,
  TrendingUp,
  ArrowRight,
  Printer,
  Mail,
} from "lucide-react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Label } from "@/components/ui/label"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { BranchSelector } from "./branch-selector"

export function ShopReports() {
  const [timeRange, setTimeRange] = useState("month")
  const [activeTab, setActiveTab] = useState("business")
  const [isGenerateReportOpen, setIsGenerateReportOpen] = useState(false)
  const [selectedBranch, setSelectedBranch] = useState("all")

  // Demo data
  const availableReports = [
    {
      id: "R-1001",
      name: "Monthly Business Summary",
      category: "business",
      description: "Overview of business performance for the current month",
      lastGenerated: "2023-06-01",
      format: "pdf",
      branch: "all",
    },
    {
      id: "R-1002",
      name: "Revenue by Scooter",
      category: "financial",
      description: "Breakdown of revenue generated by each scooter",
      lastGenerated: "2023-06-01",
      format: "xlsx",
      branch: "branch-1",
    },
    {
      id: "R-1003",
      name: "Customer Acquisition",
      category: "customer",
      description: "Analysis of new customer acquisition and retention",
      lastGenerated: "2023-05-15",
      format: "pdf",
      branch: "all",
    },
    {
      id: "R-1004",
      name: "Maintenance Schedule",
      category: "operations",
      description: "Schedule and history of scooter maintenance",
      lastGenerated: "2023-05-20",
      format: "pdf",
      branch: "branch-2",
    },
    {
      id: "R-1005",
      name: "Staff Performance",
      category: "staff",
      description: "Performance metrics for staff members",
      lastGenerated: "2023-05-31",
      format: "pdf",
      branch: "branch-1",
    },
    {
      id: "R-1006",
      name: "Quarterly Financial Statement",
      category: "financial",
      description: "Detailed financial statement for the current quarter",
      lastGenerated: "2023-04-01",
      format: "xlsx",
      branch: "all",
    },
    {
      id: "R-1007",
      name: "Booking Analytics",
      category: "business",
      description: "Analysis of booking patterns and trends",
      lastGenerated: "2023-06-01",
      format: "pdf",
      branch: "branch-3",
    },
    {
      id: "R-1008",
      name: "Inventory Status",
      category: "operations",
      description: "Current status and history of scooter inventory",
      lastGenerated: "2023-06-02",
      format: "pdf",
      branch: "branch-2",
    },
  ]

  // Filter reports based on selected branch and category
  const filteredReports = availableReports.filter((report) => {
    const categoryMatch = activeTab === "all" || report.category === activeTab
    const branchMatch = selectedBranch === "all" || report.branch === selectedBranch || report.branch === "all"
    return categoryMatch && branchMatch
  })

  const getFormatBadge = (format: string) => {
    switch (format) {
      case "pdf":
        return (
          <Badge variant="outline" className="border-red-200 text-red-500">
            PDF
          </Badge>
        )
      case "xlsx":
        return (
          <Badge variant="outline" className="border-green-200 text-green-500">
            Excel
          </Badge>
        )
      case "csv":
        return (
          <Badge variant="outline" className="border-blue-200 text-blue-500">
            CSV
          </Badge>
        )
      default:
        return <Badge variant="outline">Unknown</Badge>
    }
  }

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "business":
        return <BarChart2 className="h-5 w-5 text-blue-500" />
      case "financial":
        return <TrendingUp className="h-5 w-5 text-green-500" />
      case "customer":
        return <PieChart className="h-5 w-5 text-purple-500" />
      case "operations":
        return <LineChart className="h-5 w-5 text-orange-500" />
      case "staff":
        return <FileText className="h-5 w-5 text-indigo-500" />
      default:
        return <FileText className="h-5 w-5 text-muted-foreground" />
    }
  }

  const getBranchName = (branchId: string) => {
    switch (branchId) {
      case "all":
        return "All Branches"
      case "branch-1":
        return "Main Branch"
      case "branch-2":
        return "Beach Location"
      case "branch-3":
        return "Airport Kiosk"
      default:
        return "Unknown"
    }
  }

  const getBranchBadge = (branchId: string) => {
    if (branchId === "all") {
      return (
        <Badge variant="outline" className="border-purple-200 text-purple-500">
          All Branches
        </Badge>
      )
    }
    return (
      <Badge variant="outline" className="border-blue-200 text-blue-500">
        {getBranchName(branchId)}
      </Badge>
    )
  }

  return (
    <ShopLayout>
      <div className="flex flex-col gap-6">
        <div className="flex flex-col gap-2">
          <h1 className="text-3xl font-bold tracking-tight">My Reports</h1>
          <p className="text-muted-foreground">Generate and access business reports and analytics.</p>
        </div>

        <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
          <Tabs defaultValue="business" value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList>
              <TabsTrigger value="all">All Reports</TabsTrigger>
              <TabsTrigger value="business">Business</TabsTrigger>
              <TabsTrigger value="financial">Financial</TabsTrigger>
              <TabsTrigger value="customer">Customer</TabsTrigger>
              <TabsTrigger value="operations">Operations</TabsTrigger>
              <TabsTrigger value="staff">Staff</TabsTrigger>
            </TabsList>

            <div className="mt-4 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
              <div className="flex-1 sm:max-w-[300px]">
                <BranchSelector onBranchChange={setSelectedBranch} initialBranch="all" />
              </div>
              <div className="flex items-center gap-2">
                <Select value={timeRange} onValueChange={setTimeRange}>
                  <SelectTrigger className="w-[180px]">
                    <Calendar className="mr-2 h-4 w-4" />
                    <SelectValue placeholder="Time Range" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="week">This Week</SelectItem>
                    <SelectItem value="month">This Month</SelectItem>
                    <SelectItem value="quarter">This Quarter</SelectItem>
                    <SelectItem value="year">This Year</SelectItem>
                    <SelectItem value="custom">Custom Range</SelectItem>
                  </SelectContent>
                </Select>
                <Dialog open={isGenerateReportOpen} onOpenChange={setIsGenerateReportOpen}>
                  <DialogTrigger asChild>
                    <Button>
                      <FileText className="mr-2 h-4 w-4" />
                      Generate Report
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Generate New Report</DialogTitle>
                      <DialogDescription>Select the type of report you want to generate.</DialogDescription>
                    </DialogHeader>
                    <div className="grid gap-4 py-4">
                      <div className="grid grid-cols-4 items-center gap-4">
                        <Label htmlFor="report-type" className="text-right">
                          Report Type
                        </Label>
                        <Select>
                          <SelectTrigger className="col-span-3">
                            <SelectValue placeholder="Select report type" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="business">Monthly Business Summary</SelectItem>
                            <SelectItem value="revenue">Revenue by Scooter</SelectItem>
                            <SelectItem value="customer">Customer Acquisition</SelectItem>
                            <SelectItem value="maintenance">Maintenance Schedule</SelectItem>
                            <SelectItem value="staff">Staff Performance</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="grid grid-cols-4 items-center gap-4">
                        <Label htmlFor="branch" className="text-right">
                          Branch
                        </Label>
                        <Select defaultValue="all">
                          <SelectTrigger className="col-span-3">
                            <SelectValue placeholder="Select branch" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="all">All Branches</SelectItem>
                            <SelectItem value="branch-1">Main Branch</SelectItem>
                            <SelectItem value="branch-2">Beach Location</SelectItem>
                            <SelectItem value="branch-3">Airport Kiosk</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="grid grid-cols-4 items-center gap-4">
                        <Label htmlFor="date-range" className="text-right">
                          Date Range
                        </Label>
                        <Select defaultValue="month">
                          <SelectTrigger className="col-span-3">
                            <SelectValue placeholder="Select date range" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="week">This Week</SelectItem>
                            <SelectItem value="month">This Month</SelectItem>
                            <SelectItem value="quarter">This Quarter</SelectItem>
                            <SelectItem value="year">This Year</SelectItem>
                            <SelectItem value="custom">Custom Range</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="grid grid-cols-4 items-center gap-4">
                        <Label htmlFor="format" className="text-right">
                          Format
                        </Label>
                        <Select defaultValue="pdf">
                          <SelectTrigger className="col-span-3">
                            <SelectValue placeholder="Select format" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="pdf">PDF</SelectItem>
                            <SelectItem value="xlsx">Excel</SelectItem>
                            <SelectItem value="csv">CSV</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                    <DialogFooter>
                      <Button variant="outline" onClick={() => setIsGenerateReportOpen(false)}>
                        Cancel
                      </Button>
                      <Button onClick={() => setIsGenerateReportOpen(false)}>Generate</Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </div>
            </div>

            <TabsContent value="all" className="mt-6">
              {/* Reports Grid */}
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {filteredReports.map((report) => (
                  <Card key={report.id} className="flex flex-col">
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        {getCategoryIcon(report.category)}
                        <div className="flex flex-col gap-2 items-end">
                          {getFormatBadge(report.format)}
                          {selectedBranch === "all" && getBranchBadge(report.branch)}
                        </div>
                      </div>
                      <CardTitle className="mt-4">{report.name}</CardTitle>
                      <CardDescription>{report.description}</CardDescription>
                    </CardHeader>
                    <CardContent className="flex-1">
                      <div className="text-sm text-muted-foreground">
                        <p>Last generated: {new Date(report.lastGenerated).toLocaleDateString()}</p>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between">
                      <Button variant="outline" size="sm">
                        <Printer className="mr-2 h-4 w-4" />
                        Print
                      </Button>
                      <Button variant="outline" size="sm">
                        <Download className="mr-2 h-4 w-4" />
                        Download
                      </Button>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="business" className="mt-6">
              {/* Reports Grid */}
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {filteredReports.map((report) => (
                  <Card key={report.id} className="flex flex-col">
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        {getCategoryIcon(report.category)}
                        <div className="flex flex-col gap-2 items-end">
                          {getFormatBadge(report.format)}
                          {selectedBranch === "all" && getBranchBadge(report.branch)}
                        </div>
                      </div>
                      <CardTitle className="mt-4">{report.name}</CardTitle>
                      <CardDescription>{report.description}</CardDescription>
                    </CardHeader>
                    <CardContent className="flex-1">
                      <div className="text-sm text-muted-foreground">
                        <p>Last generated: {new Date(report.lastGenerated).toLocaleDateString()}</p>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between">
                      <Button variant="outline" size="sm">
                        <Printer className="mr-2 h-4 w-4" />
                        Print
                      </Button>
                      <Button variant="outline" size="sm">
                        <Download className="mr-2 h-4 w-4" />
                        Download
                      </Button>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="financial" className="mt-6">
              {/* Reports Grid */}
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {filteredReports.map((report) => (
                  <Card key={report.id} className="flex flex-col">
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        {getCategoryIcon(report.category)}
                        <div className="flex flex-col gap-2 items-end">
                          {getFormatBadge(report.format)}
                          {selectedBranch === "all" && getBranchBadge(report.branch)}
                        </div>
                      </div>
                      <CardTitle className="mt-4">{report.name}</CardTitle>
                      <CardDescription>{report.description}</CardDescription>
                    </CardHeader>
                    <CardContent className="flex-1">
                      <div className="text-sm text-muted-foreground">
                        <p>Last generated: {new Date(report.lastGenerated).toLocaleDateString()}</p>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between">
                      <Button variant="outline" size="sm">
                        <Printer className="mr-2 h-4 w-4" />
                        Print
                      </Button>
                      <Button variant="outline" size="sm">
                        <Download className="mr-2 h-4 w-4" />
                        Download
                      </Button>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="customer" className="mt-6">
              {/* Reports Grid */}
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {filteredReports.map((report) => (
                  <Card key={report.id} className="flex flex-col">
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        {getCategoryIcon(report.category)}
                        <div className="flex flex-col gap-2 items-end">
                          {getFormatBadge(report.format)}
                          {selectedBranch === "all" && getBranchBadge(report.branch)}
                        </div>
                      </div>
                      <CardTitle className="mt-4">{report.name}</CardTitle>
                      <CardDescription>{report.description}</CardDescription>
                    </CardHeader>
                    <CardContent className="flex-1">
                      <div className="text-sm text-muted-foreground">
                        <p>Last generated: {new Date(report.lastGenerated).toLocaleDateString()}</p>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between">
                      <Button variant="outline" size="sm">
                        <Printer className="mr-2 h-4 w-4" />
                        Print
                      </Button>
                      <Button variant="outline" size="sm">
                        <Download className="mr-2 h-4 w-4" />
                        Download
                      </Button>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="operations" className="mt-6">
              {/* Reports Grid */}
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {filteredReports.map((report) => (
                  <Card key={report.id} className="flex flex-col">
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        {getCategoryIcon(report.category)}
                        <div className="flex flex-col gap-2 items-end">
                          {getFormatBadge(report.format)}
                          {selectedBranch === "all" && getBranchBadge(report.branch)}
                        </div>
                      </div>
                      <CardTitle className="mt-4">{report.name}</CardTitle>
                      <CardDescription>{report.description}</CardDescription>
                    </CardHeader>
                    <CardContent className="flex-1">
                      <div className="text-sm text-muted-foreground">
                        <p>Last generated: {new Date(report.lastGenerated).toLocaleDateString()}</p>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between">
                      <Button variant="outline" size="sm">
                        <Printer className="mr-2 h-4 w-4" />
                        Print
                      </Button>
                      <Button variant="outline" size="sm">
                        <Download className="mr-2 h-4 w-4" />
                        Download
                      </Button>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="staff" className="mt-6">
              {/* Reports Grid */}
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {filteredReports.map((report) => (
                  <Card key={report.id} className="flex flex-col">
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        {getCategoryIcon(report.category)}
                        <div className="flex flex-col gap-2 items-end">
                          {getFormatBadge(report.format)}
                          {selectedBranch === "all" && getBranchBadge(report.branch)}
                        </div>
                      </div>
                      <CardTitle className="mt-4">{report.name}</CardTitle>
                      <CardDescription>{report.description}</CardDescription>
                    </CardHeader>
                    <CardContent className="flex-1">
                      <div className="text-sm text-muted-foreground">
                        <p>Last generated: {new Date(report.lastGenerated).toLocaleDateString()}</p>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between">
                      <Button variant="outline" size="sm">
                        <Printer className="mr-2 h-4 w-4" />
                        Print
                      </Button>
                      <Button variant="outline" size="sm">
                        <Download className="mr-2 h-4 w-4" />
                        Download
                      </Button>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </div>

        {/* Recent Reports */}
        <Card className="mt-4">
          <CardHeader>
            <CardTitle>Recent Reports</CardTitle>
            <CardDescription>
              {selectedBranch === "all"
                ? "Recently generated and accessed reports across all branches"
                : `Recently generated and accessed reports for ${getBranchName(selectedBranch)}`}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="rounded-md border">
              <div className="grid grid-cols-12 border-b bg-muted/50 p-4 font-medium">
                <div className="col-span-4">Report Name</div>
                <div className="col-span-3">Generated On</div>
                <div className="col-span-2">Format</div>
                {selectedBranch === "all" && <div className="col-span-1">Branch</div>}
                <div className={`col-span-${selectedBranch === "all" ? "2" : "3"}`}>Actions</div>
              </div>
              <div className="divide-y">
                <div className="grid grid-cols-12 items-center p-4">
                  <div className="col-span-4 font-medium">Monthly Business Summary</div>
                  <div className="col-span-3">June 1, 2023</div>
                  <div className="col-span-2">{getFormatBadge("pdf")}</div>
                  {selectedBranch === "all" && (
                    <div className="col-span-1">
                      <Badge variant="outline">All Branches</Badge>
                    </div>
                  )}
                  <div className={`col-span-${selectedBranch === "all" ? "2" : "3"} flex gap-2`}>
                    <Button variant="outline" size="sm">
                      <Download className="mr-2 h-4 w-4" />
                      Download
                    </Button>
                    <Button variant="outline" size="sm">
                      <Mail className="mr-2 h-4 w-4" />
                      Email
                    </Button>
                  </div>
                </div>
                <div className="grid grid-cols-12 items-center p-4">
                  <div className="col-span-4 font-medium">Revenue by Scooter</div>
                  <div className="col-span-3">June 1, 2023</div>
                  <div className="col-span-2">{getFormatBadge("xlsx")}</div>
                  {selectedBranch === "all" && (
                    <div className="col-span-1">
                      <Badge variant="outline">Main Branch</Badge>
                    </div>
                  )}
                  <div className={`col-span-${selectedBranch === "all" ? "2" : "3"} flex gap-2`}>
                    <Button variant="outline" size="sm">
                      <Download className="mr-2 h-4 w-4" />
                      Download
                    </Button>
                    <Button variant="outline" size="sm">
                      <Mail className="mr-2 h-4 w-4" />
                      Email
                    </Button>
                  </div>
                </div>
                <div className="grid grid-cols-12 items-center p-4">
                  <div className="col-span-4 font-medium">Inventory Status</div>
                  <div className="col-span-3">June 2, 2023</div>
                  <div className="col-span-2">{getFormatBadge("pdf")}</div>
                  {selectedBranch === "all" && (
                    <div className="col-span-1">
                      <Badge variant="outline">Beach Location</Badge>
                    </div>
                  )}
                  <div className={`col-span-${selectedBranch === "all" ? "2" : "3"} flex gap-2`}>
                    <Button variant="outline" size="sm">
                      <Download className="mr-2 h-4 w-4" />
                      Download
                    </Button>
                    <Button variant="outline" size="sm">
                      <Mail className="mr-2 h-4 w-4" />
                      Email
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
          <CardFooter>
            <Button variant="outline" className="ml-auto">
              View All Reports
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </CardFooter>
        </Card>

        {/* Report Templates */}
        <Card className="mt-4">
          <CardHeader>
            <CardTitle>Report Templates</CardTitle>
            <CardDescription>Customize and save report templates for future use</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4 md:grid-cols-3">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Daily Summary</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground">Daily business performance summary with key metrics</p>
                </CardContent>
                <CardFooter>
                  <Button variant="outline" size="sm" className="w-full">
                    Use Template
                  </Button>
                </CardFooter>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Weekly Revenue</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground">Weekly revenue breakdown by scooter and location</p>
                </CardContent>
                <CardFooter>
                  <Button variant="outline" size="sm" className="w-full">
                    Use Template
                  </Button>
                </CardFooter>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Custom Template</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground">Create a new custom report template</p>
                </CardContent>
                <CardFooter>
                  <Button variant="outline" size="sm" className="w-full">
                    Create New
                  </Button>
                </CardFooter>
              </Card>
            </div>
          </CardContent>
        </Card>
      </div>
    </ShopLayout>
  )
}

export default ShopReports
